[
  {
    "id": "dsa-intro",
    "title": "Introduction to Data Structures & Algorithms",
    "description": "Understand why DSA is crucial for efficient programming and problem-solving.",
    "content": "Data Structures and Algorithms (DSA) are fundamental concepts in computer science that form the backbone of efficient programming. A **Data Structure** is a way of organizing and storing data in a computer so that it can be accessed and modified efficiently. An **Algorithm** is a step-by-step procedure for solving a computational problem.\n\n### Why Learn DSA?\n\n* **Efficiency:** Learn to write code that runs faster and uses less memory.\n* **Problem Solving:** Develop systematic approaches to complex problems.\n* **Interview Prep:** Essential for technical interviews at top tech companies.\n* **Foundation:** Builds a strong understanding of how software works at a lower level.\n\nUnderstanding common data structures like Arrays, Linked Lists, Trees, Graphs, and Hash Maps, along with algorithms like Sorting, Searching, and Dynamic Programming, will greatly improve your coding skills."
  },
  {
    "id": "dsa-arrays",
    "title": "Arrays: The Basics",
    "description": "Explore the most fundamental data structure: arrays, and their operations.",
    "content": "An array is a collection of items stored at contiguous memory locations. The idea is to store multiple items of the same type together. This allows for efficient access to elements using an index. Arrays are one of the simplest and most widely used data structures.\n\n### Key Characteristics:\n\n* **Fixed-size (often):** In many languages, the size of an array is fixed once declared.\n* **Homogeneous:** Typically stores elements of the same data type.\n* **Zero-indexed:** The first element is at index 0, the second at index 1, and so on.\n* **Direct Access:** Elements can be accessed directly using their index, making random access very fast (O(1)).\n\n### Example (JavaScript):\n\n```javascript\n// Declaring an array\nlet numbers = [10, 20, 30, 40, 50];\n\n// Accessing elements\nconsole.log(numbers[0]); // Output: 10 (first element)\nconsole.log(numbers[3]); // Output: 40\n\n// Modifying an element\nnumbers[2] = 35;\nconsole.log(numbers); // Output: [10, 20, 35, 40, 50]\n\n// Getting array length\nconsole.log(numbers.length); // Output: 5\n```"
  }
]
